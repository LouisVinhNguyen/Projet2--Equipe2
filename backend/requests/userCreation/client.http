### Login to obtain JWT token for avocat (needed for client management)
# @name avocatLogin
POST http://localhost:3000/login/avocat
Content-Type: application/json

{
    "email": "marc.belanger@cabinet-juridique.ca",
    "password": "AvoMB2023"
}

### Save the avocat token to be used in other requests
@avocatToken = {{avocatLogin.response.body.token}}

### Test for successful registration of client
# Description: Registers a new client with valid data.
# Expected Result: A 201 status code and the client ID in the response body.
POST http://localhost:3000/register/client
Content-Type: application/json

{
    "prenom": "Alice",
    "nom": "Smith",
    "email": "alicesmith@example.com",
    "telephone": "1234567890",
    "password": "securePassword123"
}

### Test for missing fields in client registration
# Description: Attempts to register a client with missing required fields.
# Expected Result: A 400 status code with an error message.
POST http://localhost:3000/register/client
Content-Type: application/json

{
    "prenom": "Bob",
    "nom": "Johnson",
    "email": "bob.johnson@example.com",
    "telephone": "1234567890"
    // missing password
}

### Test for invalid email format in client registration
# Description: Attempts to register a client with an invalid email format.
# Expected Result: A 400 status code with an error message.
POST http://localhost:3000/register/client
Content-Type: application/json

{
    "prenom": "Bob",
    "nom": "Johnson",
    "email": "bob.johnson@invalid",
    "telephone": "1234567890",
    "password": "securePassword123"
}

### Test for invalid telephone format in client registration
# Description: Attempts to register a client with an invalid telephone format.
# Expected Result: A 400 status code with an error message.
POST http://localhost:3000/register/client
Content-Type: application/json

{
    "prenom": "Bob",
    "nom": "Johnson",
    "email": "bob.johnson@example.com",
    "telephone": "123abc4567",
    "password": "securePassword123"
}

### Test for existing email in client registration
# Description: Attempts to register a client with an email that already exists.
# Expected Result: A 409 status code with an error message.
POST http://localhost:3000/register/client
Content-Type: application/json

{
    "prenom": "Alice",
    "nom": "Clone",
    "email": "alicesmith@example.com",
    "telephone": "1234567890",
    "password": "securePassword123"
}

### Login to obtain JWT token for client
# Description: Logs in a client with valid credentials to obtain a JWT token.
# Expected Result: A 200 status code and a token in the response body.
# @name clientLogin
POST http://localhost:3000/login/client
Content-Type: application/json

{
    "email": "alicesmith@example.com",
    "password": "securePassword123"
}

### Save the client token to be used in other requests
@clientToken = {{clientLogin.response.body.token}}

### Test for client login with missing credentials
# Description: Attempts to log in without providing all required fields.
# Expected Result: A 400 status code with an error message.
POST http://localhost:3000/login/client
Content-Type: application/json

{
    "email": "alicesmith@example.com"
    // missing password
}

### Test for client login with incorrect password
# Description: Attempts to log in with an incorrect password.
# Expected Result: A 401 status code with an error message.
POST http://localhost:3000/login/client
Content-Type: application/json

{
    "email": "alicesmith@example.com",
    "password": "wrongPassword"
}

### Test for client login with non-existent email
# Description: Attempts to log in with an email that does not exist.
# Expected Result: A 401 status code with an error message.
POST http://localhost:3000/login/client
Content-Type: application/json

{
    "email": "nonexistent@example.com",
    "password": "securePassword123"
}

### Test for retrieving all clients (avocat permission)
# Description: Retrieves all clients in the system using an avocat token.
# Expected Result: A 200 status code and a list of clients.
GET http://localhost:3000/client
Authorization: Bearer {{avocatToken}}

### Test for retrieving all clients (client denied)
# Description: Attempts to retrieve all clients using a client token.
# Expected Result: A 403 status code with an access denied message.
GET http://localhost:3000/client
Authorization: Bearer {{clientToken}}

### Test for retrieving all clients (no token)
# Description: Attempts to retrieve all clients without authentication.
# Expected Result: A 401 status code with an error message.
GET http://localhost:3000/client

### Test for updating a client (avocat permission)
# Description: Updates an existing client with valid data using an avocat token.
# Expected Result: A 200 status code and a success message.
PUT http://localhost:3000/client/2
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "prenom": "Updated",
    "nom": "Client",
    "email": "updatedclient@example.com",
    "telephone": "9876543210"
}

### Test for updating a client (client permission for own data)
# Description: Updates client's own data using their token.
# Expected Result: A 200 status code and a success message.
PUT http://localhost:3000/client/2
Content-Type: application/json
Authorization: Bearer {{clientToken}}

{
    "prenom": "Self",
    "nom": "Updated",
    "email": "selfrequest@example.com",
    "telephone": "9876543210"
}

### Test for updating a client with missing fields
# Description: Attempts to update a client with missing required fields.
# Expected Result: A 400 status code with an error message.
PUT http://localhost:3000/client/2
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "prenom": "Incomplete",
    "nom": "Data",
    "telephone": "9876543210"
    // missing email
}

### Test for updating a client with invalid email
# Description: Attempts to update a client with an invalid email format.
# Expected Result: A 400 status code with an error message.
PUT http://localhost:3000/client/2
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "prenom": "Invalid",
    "nom": "Email",
    "email": "invalid-email",
    "telephone": "9876543210"
}

### Test for updating a client with invalid telephone
# Description: Attempts to update a client with an invalid telephone format.
# Expected Result: A 400 status code with an error message.
PUT http://localhost:3000/client/2
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "prenom": "Invalid",
    "nom": "Phone",
    "email": "valid@example.com",
    "telephone": "abcdefghij"
}

### Test for updating a non-existent client
# Description: Attempts to update a client that does not exist.
# Expected Result: A 404 status code with an error message.
PUT http://localhost:3000/client/999
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "prenom": "Nonexistent",
    "nom": "Client",
    "email": "nonexistent@example.com",
    "telephone": "9876543210"
}

### Test for deleting a client (avocat permission)
# Description: Deletes an existing client by ID using an avocat token.
# Expected Result: A 200 status code and a success message.
DELETE http://localhost:3000/client/2
Authorization: Bearer {{avocatToken}}

### Test for deleting a client (client permission for own data)
# Description: Deletes client's own account using their token.
# Expected Result: A 200 status code and a success message.
DELETE http://localhost:3000/client/3
Authorization: Bearer {{clientToken}}

### Test for deleting a non-existent client
# Description: Attempts to delete a client that does not exist.
# Expected Result: A 404 status code with an error message.
DELETE http://localhost:3000/client/999
Authorization: Bearer {{avocatToken}}
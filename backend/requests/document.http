### Login to obtain JWT token for avocat (needed for document management)
# @name avocatLogin
POST http://localhost:3000/login/avocat
Content-Type: application/json

{
    "email": "marc.belanger@cabinet-juridique.ca",
    "password": "AvoMB2023"
}

### Save the avocat token to be used in other requests
@avocatToken = {{avocatLogin.response.body.token}}

### Test for retrieving all documents (avocat permission)
# Description: Retrieves all documents in the system using an avocat token.
# Expected Result: A 200 status code and a list of documents.
GET http://localhost:3000/document
Authorization: Bearer {{avocatToken}}

### Test for retrieving all documents (no token)
# Description: Attempts to retrieve all documents without authentication.
# Expected Result: A 401 status code with an error message.
GET http://localhost:3000/document

### Test for successful creation of document
# Description: Creates a new document with valid data.
# Expected Result: A 201 status code and the document ID in the response body.
POST http://localhost:3000/document
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Contrat de vente",
    "description": "Contrat standard pour la vente de propriété",
    "fichier": "base64encodedstring",
    "dossierID": 1
}

### Test for creation of document without dossierID
# Description: Creates a new document without associating it with a specific case.
# Expected Result: A 201 status code and the document ID in the response body.
POST http://localhost:3000/document
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Template de contrat",
    "description": "Modèle de contrat réutilisable",
    "fichier": "base64encodedstring"
}

### Test for missing fields in document creation
# Description: Attempts to create a document with missing required fields.
# Expected Result: A 400 status code with an error message.
POST http://localhost:3000/document
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Document incomplet",
    "description": "Description du document"
    // missing fichier
}

### Test for document creation with non-existent avocat
# Description: Attempts to create a document with an avocat ID that does not exist.
# Expected Result: A 404 status code with an error message.
POST http://localhost:3000/document
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 999,
    "documentNom": "Document test",
    "description": "Document de test",
    "fichier": "base64encodedstring"
}

### Test for document creation with non-existent dossier
# Description: Attempts to create a document with a dossier ID that does not exist.
# Expected Result: A 404 status code with an error message.
POST http://localhost:3000/document
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Document test",
    "description": "Document de test",
    "fichier": "base64encodedstring",
    "dossierID": 999
}

### Test for document creation with duplicate name
# Description: Attempts to create a document with a name that already exists.
# Expected Result: A 409 status code with an error message.
POST http://localhost:3000/document
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Contrat de vente",
    "description": "Autre contrat de vente",
    "fichier": "base64encodedstring"
}

### Test for updating a document
# Description: Updates an existing document with valid data.
# Expected Result: A 200 status code and a success message.
PUT http://localhost:3000/document/1
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Contrat de vente mis à jour",
    "description": "Version révisée du contrat standard",
    "fichier": "base64encodedstring"
}

### Test for updating a document with missing fields
# Description: Attempts to update a document with missing required fields.
# Expected Result: A 400 status code with an error message.
PUT http://localhost:3000/document/1
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Document incomplet",
    "description": "Description mise à jour"
    // missing fichier
}

### Test for updating a non-existent document
# Description: Attempts to update a document that does not exist.
# Expected Result: A 404 status code with an error message.
PUT http://localhost:3000/document/999
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Document inexistant",
    "description": "Ce document n'existe pas",
    "fichier": "base64encodedstring"
}

### Test for updating a document with non-existent avocat
# Description: Attempts to update a document with an avocat ID that does not exist.
# Expected Result: A 404 status code with an error message.
PUT http://localhost:3000/document/1
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 999,
    "documentNom": "Document test",
    "description": "Document de test",
    "fichier": "base64encodedstring"
}

### Test for updating a document with duplicate name
# Description: Attempts to update a document with a name that already exists.
# Expected Result: A 409 status code with an error message.
PUT http://localhost:3000/document/2
Content-Type: application/json
Authorization: Bearer {{avocatToken}}

{
    "avocatID": 1,
    "documentNom": "Contrat de vente mis à jour",
    "description": "Description différente",
    "fichier": "base64encodedstring"
}

### Test for deleting a document
# Description: Deletes an existing document by ID.
# Expected Result: A 200 status code and a success message.
DELETE http://localhost:3000/document/1
Authorization: Bearer {{avocatToken}}

### Test for deleting a non-existent document
# Description: Attempts to delete a document that does not exist.
# Expected Result: A 404 status code with an error message.
DELETE http://localhost:3000/document/999
Authorization: Bearer {{avocatToken}}